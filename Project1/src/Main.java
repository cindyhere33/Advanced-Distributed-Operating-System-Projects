
import java.io.IOException;
import java.util.HashMap;
import java.util.Random;

public class Main {

	// Server thread that listens to this node's port
	public static Server server;

	// Random integer selected when this node's server starts up
	public static Integer labelValue;

	// Total number of nodes in the network connected to this node
	public static Integer noNodes;

	// Number of processes that have indicated that they wish to terminate
	public static Integer noOfTerminatedProcesses;

	// The token originating from this node
	public static Token myToken;

	// The Node object of this node - contains port number and hostname
	public static Node myNode;

	// Map of all nodes with their identifiers as keys
	public static HashMap<String, Node> nodeMap = new HashMap<>();

	// Client object for this node
	public static Client client;

	// Map to keep note of what other processes have terminated (not required)
	public static HashMap<String, Boolean> isProcessTerminated = new HashMap<>();

	// True indicates whether the token generated by this token has completed
	// traversing its path
	public static Boolean isComplete = false;

	public static void main(String[] args) throws IOException {
		try {
			ConfigParser parser = new ConfigParser(args[0]);
			Main.labelValue = new Random().nextInt(10) + 1;
			Main.noOfTerminatedProcesses = 0;
			Main.isComplete = false;
			parser.parseFile();
			for (String key : Main.nodeMap.keySet()) {
				Main.isProcessTerminated.put(key, false);
			}
			server = new Server(myNode.getHostName(), myNode.getPortNo());
			server.start();
			Thread.sleep(3000);
			Client.sendToken(myToken);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/*
	 * Kills the server thread and closes server socket
	 */
	@SuppressWarnings("deprecation")
	public static void killServer() {
		server.stop();
		server.destroy();
	}

}
